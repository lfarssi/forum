
`<span style="color: #ffff3b">Server()</span> function in [server.go](./server/server.go)

A **secure client-server connection** over **[HTTPS](https://en.wikipedia.org/wiki/HTTPS)** relies on four parameters: **key exchange, authentication, symmetric encryption, and hashing**. 

1. **Key Exchange Protocol** ensures that both parties can securely generate and exchange the necessary encryption keys.  
2. **Authentication** verifies the server’s identity, preventing man-in-the-middle attacks.  
3. **Symmetric Encryption** guarantees confidentiality and privacy by encrypting the data exchanged.  
4. **Hashing Algorithms** maintain data integrity, ensuring that the transmitted data has not been altered.  

These four parameters are combined into **[Cipher Suites](https://ciphersuite.info/cs/)**, which define the cryptographic algorithms used in a TLS connection. Each cipher suite follows the format:  

`TLS_{KeyExchange}{Authentication}_WITH_{Encryption}{Hash}`  
Example: `TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`  

Where each part specifies the protocol for key exchange, authentication, encryption, and hashing. The **[TLS](https://en.wikipedia.org/wiki/Transport_Layer_Security) (Transport Layer Security) protocol** is responsible for selecting and enforcing cipher suites in HTTPS:  

- During the **TLS handshake**, the **client** (browser) sends a list of supported cipher suites.
- The **server** picks the most secure one it supports from the list.
- The chosen cipher suite defines how the four parameters will work for that session.

The actual selection of a cipher suite depends on:  

- The **client’s** and **server’s** supported cipher suites.
- The server’s configuration (it can enforce strong ciphers).
- The **TLS version** (newer versions deprecate weaker ciphers).

A seamless TLS handshake enables the encrypted data transmission that secures our digital world. It allows safe online commerce, communication, and connectivity by:

- Verifying you are connected to the authentic site and not an impersonator
- Encrypting all data exchanged during the session.
- Ensuring no third party can read or modify the information as it travels across the internet

Without the TLS handshake, our sensitive information would be exposed online.  

**Although** [Let’s Encrypt](https://letsencrypt.org/) offers free trusted certificates, we wanted to generate our own self-signed certificate. In order to do so, we first created a configuration file named [san.conf](./tls/san.conf) where we included the Subject Alternative Name (SAN) to match the used domain (localhost for **development**). Then, we generated our certificates with SAN support:

```bash
# Generate CA key and certificate
openssl genrsa -out ca.key 4096
openssl req -x509 -new -nodes -key ca.key -sha256 -days 365 -out ca.crt -subj "/CN=MyCA"

# Generate server key
openssl genrsa -out server.key 4096

# Generate CSR using the san.conf
openssl req -new -key server.key -out server.csr -subj "/CN=127.0.0.1" -config san.conf

# Generate server certificate
openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial \
    -out server.crt -days 365 -sha256 -extensions v3_req -extfile san.conf
```

`2048-bit`: Good security, faster performance.  
`4096-bit`: Stronger security, slower performance.  

- **san.conf**: Configuration file specifying certificate attributes, including Subject Alternative Names (SAN) for IP and DNS.  
- **ca.key**: Private key of the Certificate Authority (CA), used to sign certificates.  
- **ca.crt**: Public certificate of the CA, used to verify certificates it signs.  
- **server.key**: Private key for the server, used in SSL/TLS encryption.  
- **server.csr**: Certificate Signing Request (CSR) for the server, sent to the CA to obtain a signed certificate.  
- **server.crt**: Server’s signed certificate, issued by the CA, used for HTTPS authentication and encryption.  

**Lastly**, we have imported the CA certificate [ca.crt](./tls/ca.crt) into the browser's trusted root certificates.

TLS excali: https://excalidraw.com/#json=deZ-na0KKm5T9M8rbE9yV,KaJgeOjLKFIs9Yus8PW6Yg